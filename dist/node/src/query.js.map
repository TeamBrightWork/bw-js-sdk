{"version":3,"sources":["../../../src/query.js"],"names":["Query","_where","_sort","_limit","_skip","field","value","push","set","values","num","criteria","isEmpty","where","transform","ary","extend","sort","limit","skip"],"mappings":"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","file":"query.js","sourcesContent":["'use strict';\n\nimport _ from 'lodash';\n\n/**\n * @class Query\n * @classdesc Used to define criteria for use with {@link Repository#find}(query).\n * @see Repository\n */\nexport default class Query {\n\n    /**\n     * @private\n     */\n    constructor() {\n        this._where = [];\n        this._sort = [];\n        this._limit = null;\n        this._skip = null;\n    }\n\n    /**\n     * Add criteria to enforce that the model field is equal the the value supplied.\n     * @param field the model field to enforce equality\n     * @param value the comparison value\n     * @returns {Query}\n     */\n    equalTo(field, value) {\n        this._where.push(_.set({}, field, value));\n        return this;\n    }\n\n    /**\n     * Add criteria to enforce that the model field is not equal to the value supplied.\n     * @param field the model field to enforce non equality\n     * @param value the comparison value\n     * @returns {Query}\n     */\n    notEqualTo(field, value) {\n        this._where.push(_.set({}, [field, '!'], value));\n        return this;\n    }\n\n    /**\n     * Add criteria to limit the results where the model field value is less than the value supplied.\n     * @param field the model field to compare against\n     * @param value the comparison value\n     * @returns {Query}\n     */\n    lessThan(field, value) {\n        this._where.push(_.set({}, [field, '<'], value));\n        return this;\n    }\n\n    /**\n     * Add criteria to limit the results where the model field value is less than or equal to the value supplied.\n     * @param field the model field to compare against\n     * @param value the comparison value\n     * @returns {Query}\n     */\n    lessThanOrEqual(field, value) {\n        this._where.push(_.set({}, [field, '<='], value));\n        return this;\n    }\n\n    /**\n     * Add criteria to limit the results where the model field value is greater than the value supplied.\n     * @param field the model field to compare against\n     * @param value the comparison value\n     * @returns {Query}\n     */\n    greaterThan(field, value) {\n        this._where.push(_.set({}, [field, '>'], value));\n        return this;\n    }\n\n    /**\n     * Add criteria to limit the results where the model field value is greater than or equal to the value supplied.\n     * @param field the model field to compare against\n     * @param value the comparison value\n     * @returns {Query}\n     */\n    greaterThanOrEqual(field, value) {\n        this._where.push(_.set({}, [field, '>='], value));\n        return this;\n    }\n\n    /**\n     * Add criteria to limit the results where the model field value is like the value supplied.  This allows you to perform a basic wildcard search using (%) as the wildcard.\n     * @param field the model field to compare against\n     * @param value the comparison value\n     * @returns {Query}\n     */\n    like(field, value) {\n        // % wildcard\n        this._where.push(_.set({}, [field, 'like'], value));\n        return this;\n    }\n\n    /**\n     * Add criteria to limit the results where the model field value containts the supplied value. This is equivalent to a string contains comparison (or like %value%).\n     * @param field the model field to compare against\n     * @param value the comparison value\n     * @returns {Query}\n     */\n    contains(field, value) {\n        this._where.push(_.set({}, [field, 'contains'], value));\n        return this;\n    }\n\n    /**\n     * Add criteria to limit the results where the model field value is a string that starts with the supplied value.\n     * @param field the model field to compare against\n     * @param value the comparison value\n     * @returns {Query}\n     */\n    startsWith(field, value) {\n        this._where.push(_.set({}, [field, 'startsWith'], value));\n        return this;\n    }\n\n    /**\n     * Add criteria to limit the results where the model field value is a string that ends with the supplied value.\n     * @param field the model field to compare against\n     * @param value the comparison value\n     * @returns {Query}\n     */\n    endsWith(field, value) {\n        this._where.push(_.set({}, [field, 'endsWith'], value));\n        return this;\n    }\n\n    /**\n     * Add criteria to limit the results where the model field value is one of the items in the supplied list.\n     * @param field the model field to compare against\n     * @param values the comparison value\n     *\n     * @example <caption>Find all photos that have been 'reviewed' or 'downloaded'</caption>\n     *\n     * var query = BrightWork.Query().oneOf('status', ['reviewed', 'downloaded']);\n     *\n     * console.log('searching for photos ...');\n     * bw.models.photo.find(query).then(function(photos) {\n     *   console.log('...results', photos);\n     * });\n     *\n     * @returns {Query}\n     */\n    oneOf(field, values) {\n        this._where.push(_.set({}, field, values));\n        return this;\n    }\n\n    /**\n     * Add criteria to limit the results where the model field value is not one of the items in the supplied list.\n     * @param field the model field to compare against\n     * @param values the comparison value\n     * @returns {Query}\n     */\n    notOneOf(field, values) {\n        this._where.push(_.set({}, [field, '!'], values));\n        return this;\n    }\n\n    /**\n     * Sort the result by the supplied field in ascending order.\n     * @param field\n     *\n     * @example <caption>Sort by created date and then name</caption>\n     *\n     * var query = BrightWork.Query().ascending('created').ascending('name');\n     *\n     * console.log('searching for photos ...');\n     * bw.models.photo.find(query).then(function(photos) {\n     *   console.log('...results', photos);\n     * });\n     *\n     * @returns {Query}\n     */\n    ascending(field) {\n        this._sort.push(_.set({}, field, 1));\n        return this;\n    }\n\n    /**\n     * Sort the result by the supplied field in descending order.\n     * @param field\n     * @returns {Query}\n     */\n    descending(field) {\n        this._sort.push(_.set({}, field, -1));\n        return this;\n    }\n\n    /**\n     * Limit the results to the maximum number of records returned.\n     * @param num the maximum number of records to return\n     *\n     * @example <caption>Top 50 photo albumns by rank</caption>\n     *\n     * var query = BrightWork.Query().ascending('rank').limit(50);\n     *\n     * console.log('searching for top 50 photo albums...');\n     * bw.models.album.find(query).then(function(albums) {\n     *   console.log('...results', albums);\n     * });\n     *\n     * @returns {Query}\n     */\n    limit(num) {\n        this._limit = num;\n        return this;\n    }\n\n    /**\n     * Skip the specified number of records.\n     * @param num the number of records to skip\n     *\n     * @example <caption>Combine skip and limit to implement paging.</caption>\n     *\n     * var pageSize = 10;\n     * var page = 1;\n     *\n     * var query = BrightWork.Query().limit(pageSize).skip(pageSize * (page - 1));\n     *\n     * console.log('grabbing the first page of photos...');\n     * bw.models.photo.find(query).then(function(photos) {\n     *   console.log('...results', photos);\n     * });\n     *\n     * @returns {Query}\n     */\n    skip(num) {\n        this._skip = num;\n        return this;\n    }\n\n    /**\n     * Cast the query to a criteria object for evaluation.\n     * @private\n     * @returns {Criteria}\n     */\n    toCriteria() {\n        let criteria = { };\n\n        if (!_.isEmpty(this._where)) {\n            criteria.where = _.transform(this._where, _.ary(_.extend, 2),  {});\n        }\n\n        if (!_.isEmpty(this._sort)) {\n            criteria.sort = _.transform(this._sort, _.ary(_.extend, 2),  {});\n        }\n\n        if (this._limit > 0) {\n            criteria.limit = this._limit;\n        }\n\n        if (this._skip > 0) {\n            criteria.skip = this._skip;\n        }\n\n        return criteria;\n    }\n}\n"]}