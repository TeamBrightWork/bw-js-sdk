{"version":3,"sources":["../../../src/repository.js"],"names":["Repository","apiKey","baseUrl","modelName","collections","timeout","toLowerCase","request","create","baseURL","headers","forEach","collection","add","modelId","instance","remove","instanceId","post","then","res","data","put","id","delete","get","query","criteria","toCriteria","collectionName","console","log"],"mappings":"AAAA;;;;;;;;AAEA;;;;;;;;AAEA;;;;;IAKqBA,U;;AAEjB;;;;;;AAMA,wBAAYC,MAAZ,EAAoBC,OAApB,EAA6BC,SAA7B,EAAwCC,WAAxC,EAAqDC,OAArD,EAA8D;AAAA;;AAAA;;AAE1D,aAAKF,SAAL,GAAiBA,UAAUG,WAAV,EAAjB;AACA,aAAKC,OAAL,GAAe,gBAAMC,MAAN,CAAa;AACxBC,qBAASP,UAAU,OADK;AAExBG,qBAASA,OAFe;AAGxBK,qBAAS;AACL,0BAAUT,MADL;AAEL,gCAAgB;AAFX;AAHe,SAAb,CAAf;;AASA;;;;AAIA,YAAIG,WAAJ,EAAiB;AACbA,wBAAYO,OAAZ,CAAoB,UAACC,UAAD,EAAgB;AAChC,sBAAKA,UAAL,IAAmB,EAAnB;AACA,sBAAKA,UAAL,EAAiBC,GAAjB,GAAuB,UAACC,OAAD,EAAUC,QAAV,EAAuB;AAC1C,2BAAO,MAAKF,GAAL,CAASC,OAAT,EAAkBF,UAAlB,EAA8BG,QAA9B,CAAP;AACH,iBAFD;;AAIA,sBAAKH,UAAL,EAAiBI,MAAjB,GAA0B,UAACF,OAAD,EAAUG,UAAV,EAAyB;AAC/C,2BAAO,MAAKD,MAAL,CAAYF,OAAZ,EAAqBF,UAArB,EAAiCK,UAAjC,CAAP;AACH,iBAFD;AAGH,aATD;AAUH;AACJ;;AAED;;;;;;;;;+BAKOF,Q,EAAU;AACb,mBAAO,KAAKR,OAAL,CAAaW,IAAb,OACC,KAAKf,SADN,EAEHY,QAFG,EAGLI,IAHK,CAGA,UAASC,GAAT,EAAa;AAChB,uBAAOA,IAAIC,IAAX;AACH,aALM,CAAP;AAMH;;AAED;;;;;;;;6BAKKN,Q,EAAS;AACV,mBAAO,KAAKR,OAAL,CAAae,GAAb,OACC,KAAKnB,SADN,SACmBY,SAASQ,EAD5B,EAEHR,QAFG,EAGLI,IAHK,CAGA,UAASC,GAAT,EAAa;AAChB,uBAAOA,IAAIC,IAAX;AACH,aALM,CAAP;AAMH;;AAED;;;;;;;;gCAKOE,E,EAAI;AACP,mBAAO,KAAKhB,OAAL,CAAaiB,MAAb,OACC,KAAKrB,SADN,SACmBoB,EADnB,EAELJ,IAFK,CAEA,UAASC,GAAT,EAAa;AAChB,uBAAOA,IAAIC,IAAX;AACH,aAJM,CAAP;AAKH;;AAED;;;;;;;;4BAKIE,E,EAAI;AACJ,mBAAO,KAAKhB,OAAL,CAAakB,GAAb,OACC,KAAKtB,SADN,SACmBoB,EADnB,EAELJ,IAFK,CAEA,UAAUC,GAAV,EAAe;AAClB,uBAAOA,IAAIC,IAAX;AACH,aAJM,CAAP;AAKH;;AAED;;;;;;;;;6BAMKK,K,EAAO;AACR,gBAAIC,WAAYD,KAAD,GAAUA,MAAME,UAAN,EAAV,GAA+B,EAA9C;;AAEA,mBAAO,KAAKrB,OAAL,CAAaW,IAAb,OACC,KAAKf,SADN,YAEHwB,QAFG,EAGLR,IAHK,CAGA,UAAUC,GAAV,EAAe;AAClB,uBAAOA,IAAIC,IAAX;AACH,aALM,CAAP;AAMH;;AAED;;;;;;;;;;4BAOIP,O,EAASe,c,EAAgBd,Q,EAAU;AACnCe,oBAAQC,GAAR,CAAY,QAAZ,EAAsBjB,OAAtB,EAA+Be,cAA/B,EAA+Cd,QAA/C;AACA,mBAAO,KAAKR,OAAL,CAAaW,IAAb,OACC,KAAKf,SADN,SACmBW,OADnB,SAC8Be,cAD9B,EAEHd,QAFG,EAGLI,IAHK,CAGA,UAASC,GAAT,EAAa;AAChB,uBAAOA,IAAIC,IAAX;AACH,aALM,CAAP;AAMH;;AAED;;;;;;;;;+BAMOP,O,EAASe,c,EAAgBZ,U,EAAY;AACxC,mBAAO,KAAKV,OAAL,CAAaiB,MAAb,OACC,KAAKrB,SADN,SACmBW,OADnB,SAC8Be,cAD9B,SACgDZ,UADhD,EAELE,IAFK,CAEA,UAASC,GAAT,EAAa;AAChB,uBAAOA,IAAIC,IAAX;AACH,aAJM,CAAP;AAKH;;;;;;kBA1IgBrB,U","file":"repository.js","sourcesContent":["'use strict';\n\nimport axios from 'axios';\n\n/**\n * @class Repository\n * @classdesc Used to interact with the persistence store.\n * @description There is no need to instantiate a repository directly. Upon initialization of the SDK all of your model repositories are available via the *.models namespace.\n */\nexport default class Repository {\n\n    /**\n     * @private\n     * @param apiKey\n     * @param baseUrl\n     * @param modelName\n     */\n    constructor(apiKey, baseUrl, modelName, collections, timeout) {\n\n        this.modelName = modelName.toLowerCase();\n        this.request = axios.create({\n            baseURL: baseUrl + '/api/',\n            timeout: timeout,\n            headers: {\n                'apiKey': apiKey,\n                'Content-Type': 'application/json'\n            }\n        });\n\n        /**\n         * Add the convienence helpers to the user\n         * can just call bw.models.model.collection.add / remove\n         */\n        if (collections) {\n            collections.forEach((collection) => {\n                this[collection] = {};\n                this[collection].add = (modelId, instance) => {\n                    return this.add(modelId, collection, instance);\n                };\n\n                this[collection].remove = (modelId, instanceId) => {\n                    return this.remove(modelId, collection, instanceId);\n                };\n            });\n        }\n    }\n\n    /**\n     * Create a new model instance in the persistence store.\n     * @param instance the model instance\n     * @returns {Promise|*}\n     */\n    create(instance) {\n        return this.request.post(\n            `/${this.modelName}`,\n            instance\n        ).then(function(res){\n            return res.data;\n        });\n    }\n\n    /**\n     * Update an existing model instance in the persistence store.\n     * @param instance the model instance\n     * @returns {Promise|*}\n     */\n    save(instance){\n        return this.request.put(\n            `/${this.modelName}/${instance.id}`,\n            instance\n        ).then(function(res){\n            return res.data;\n        });\n    }\n\n    /**\n     * Delete an existing model instance from the persistence store.\n     * @param id the identifier of the model instance to delete\n     * @returns {Promise|*}\n     */\n    delete(id) {\n        return this.request.delete(\n            `/${this.modelName}/${id}`\n        ).then(function(res){\n            return res.data;\n        });\n    }\n\n    /**\n     * Retrieve an existing model instance from the persistence store.\n     * @param id the identifier of the model instance to get\n     * @returns {*}\n     */\n    get(id) {\n        return this.request.get(\n            `/${this.modelName}/${id}`\n        ).then(function (res) {\n            return res.data;\n        });\n    }\n\n    /**\n     * Search the persistence store for models matching the {Query} criteria.\n     * @param query {Query} the criteria to use for the search\n     * @returns {Promise|*}\n     * @see {Query}\n     */\n    find(query) {\n        var criteria = (query) ? query.toCriteria() : {};\n\n        return this.request.post(\n            `/${this.modelName}/find`,\n            criteria\n        ).then(function (res) {\n            return res.data;\n        });\n    }\n\n    /**\n     * Add a child model instance to collection\n     * @param modelId {*} the parent model identifier\n     * @param collectionName {string} the collection name\n     * @param instance the child instance object\n     * @returns {Promise|*}\n     */\n    add(modelId, collectionName, instance) {\n        console.log('*add* ', modelId, collectionName, instance);\n        return this.request.post(\n            `/${this.modelName}/${modelId}/${collectionName}`,\n            instance\n        ).then(function(res){\n            return res.data;\n        });\n    }\n\n    /**\n     * Remove a child model instance from a collection\n     * @param modelId {*} the parent model identifier\n     * @param collectionName {string} the collection name\n     * @param instanceId the child model identifier\n     */\n    remove(modelId, collectionName, instanceId) {\n        return this.request.delete(\n            `/${this.modelName}/${modelId}/${collectionName}/${instanceId}`\n        ).then(function(res){\n            return res.data;\n        });\n    }\n\n}"]}